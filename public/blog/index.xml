<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on ~/.andy_winarko</title>
    <link>/blog/</link>
    <description>Recent content in Blog on ~/.andy_winarko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 21 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Awesome Crawler</title>
      <link>/blog/awesome-crawler/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/awesome-crawler/</guid>
      <description>Awesome-crawler A collection of awesome web crawler,spider and resources in different languages.
Contents  Awesome-crawler  Contents Python Java C# JavaScript PHP C++ C Ruby R Erlang Perl Go Scala   Python  Scrapy - A fast high-level screen scraping and web crawling framework.  django-dynamic-scraper - Creating Scrapy scrapers via the Django admin interface. Scrapy-Redis - Redis-based components for Scrapy. scrapy-cluster - Uses Redis and Kafka to create a distributed on demand scraping cluster.</description>
    </item>
    
    <item>
      <title>Golang Cheat Sheet</title>
      <link>/blog/golang-cheat-sheet/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/golang-cheat-sheet/</guid>
      <description>Index  Index  Credits Go in a Nutshell  Basic Syntax  Hello World Operators Arithmetic Comparison Logical Other Declarations Functions Functions As Values And Closures Variadic Functions Built-in Types Type Conversions Packages Control structures If Loops Switch Arrays, Slices, Ranges Arrays Slices Operations on Arrays and Slices Maps Structs Pointers Interfaces Embedding Errors  Concurrency  Goroutines Channels Channel Axioms Printing Reflection Type Switch  Snippets  HTTP Server   Credits Most example code taken from A Tour of Go, which is an excellent introduction to Go.</description>
    </item>
    
    <item>
      <title>Install Fira-Code font</title>
      <link>/blog/install-fira-code-font/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/install-fira-code-font/</guid>
      <description>Kenapa Fira Code ? ðŸ˜•
 Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like -&amp;gt;, &amp;lt;= or := are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but thatâ€™s not the case yet.</description>
    </item>
    
    <item>
      <title>Useful git Command --amend</title>
      <link>/blog/useful-git-command---amend/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/useful-git-command---amend/</guid>
      <description>&amp;ldquo;Photo by Mick Haupt on Unsplash&amp;rdquo;
Git udah pasti jadi tools sehari-hari yang dipakai software developer, salah satu command git basic yang sering dipakai adalah git commit.
nah problem yang muncul kalo pake git commit biasanya kayak gini,
 git commit gua messagenya salah, gantinya gmn ya ?
 eh file gua ada 1 yang gak ke commit, gua bikin commit baru aja ya?
  Nah di case-case ini kita bisa pakai option --amend</description>
    </item>
    
    <item>
      <title>Golang print typeof object</title>
      <link>/blog/golang-print-typeof-object/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/golang-print-typeof-object/</guid>
      <description>The Go reflection package has methods for inspecting the type of variables. The following snippet will print out the reflection type of a string, integer and float.
 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;reflect&amp;quot; ) func main() { tst := &amp;quot;string&amp;quot; tst2 := 10 tst3 := 1.2 fmt.Println(reflect.TypeOf(tst)) fmt.Println(reflect.TypeOf(tst2)) fmt.Println(reflect.TypeOf(tst3)) }  more documentation https://golang.org/pkg/reflect/#TypeOf</description>
    </item>
    
  </channel>
</rss>